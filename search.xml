<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Computer and Internet</title>
      <link href="/2025/05/25/computer-and-internet/"/>
      <url>/2025/05/25/computer-and-internet/</url>
      
        <content type="html"><![CDATA[<h1 id="基本的概念和问题的解答"><a href="#基本的概念和问题的解答" class="headerlink" title="基本的概念和问题的解答"></a>基本的概念和问题的解答</h1><h2 id="什么是因特网"><a href="#什么是因特网" class="headerlink" title="什么是因特网"></a>什么是因特网</h2><p>笼统地说，一个连接着很多节点并用于传输信息的系统就可以称作是一个网络。但是显然这实在太笼统了，对于理解因特网和诸多网络系统来说没什么益处。</p><p>顺带一提，网络(<em>network</em>)一词并非单指因特网，网络包括电话网络，无线网络，光纤网络，数据中心网络，交通运输网络，社交网络等等。但是在计算机网络这一部分我们专注于讲解因特网而已。</p><p><strong>所以到底什么什么是因特网？</strong></p><ul><li>因特网是使用TCP/IP组件连接全世界范围内的组织、个人设备和无线计算机网络的全球系统。是网络的网络</li></ul><hr><p>几个概念：</p><ul><li><strong>端系统</strong>：现代社会中的所有可以接入因特网的电子设备，包括手机、电脑、智能汽车、智能家居、智能机器人、手表、眼睛，都可以是一个端系统(<em>end system</em>)，或者说一个主机(<em>host</em>)</li><li><strong>分组交换机</strong>：分组交换机分为路由器和链路层交换机，链路层交换机主要在链路层工作；路由器主要是在网络核心工作，这两种交换机的作用主要就是将<strong>分组</strong>从一条通信链路转发到另一条通信链路去。</li><li><strong>因特网服务提供商</strong>：端系统通过因特网服务提供商(<em>Internet Service Provider, ISP</em>)来接入因特网。包括本地有线或者电话公司的本地ISP，公司ISP，学校ISP</li><li>因特网<strong>协议</strong>：因特网运行很多协议，包括TCP/IP</li><li><strong>因特网标准</strong>：由IETF($InternetEngineeringTaskForce$)，即因特网工程任务组制定，制定出来的标准文档叫做请求评论(<em>Request for Comment, RFC</em>)</li></ul><hr><p>除了最开始总体的因特网概念，我们还可以通过因特网组成的视角来认识因特网。</p><h3 id="Internet-Component-View"><a href="#Internet-Component-View" class="headerlink" title="Internet - Component View"></a>Internet - Component View</h3><ul><li>数以百亿计的主机或者说是端系统</li><li>通信链路</li><li>路由器</li></ul><h3 id="Internet-Service-View"><a href="#Internet-Service-View" class="headerlink" title="Internet - Service View"></a>Internet - Service View</h3><p>除了构建因特网的组件，我们也可以从另一个角度来看待因特网，即从为<strong>应用程序提供服务的基础设施</strong>的角度来描述因特网。因特网中如手机、电脑、平板中运行的电子游戏、办公软件、视频音频软件等等都需要将信息从不同的端系统之间流动起来，所以说这些软件被称为<strong>分布式应用</strong>。</p><p>更进一步的，假如说你有一个非常好的想法去做一款非常厉害的软件，这个软件当然是运行在啊端系统上的，你讲他在本地开发好后，你马上就要面临一个问题：<strong>我该如何指挥因特网将信息从一个端系统发送到指定的端系统上呢？</strong></p><p>为了解决这个问题，因特网中的端系统有一个东西叫做<strong>套接字接口</strong>，这个套接字接口提供了运行在一个端系统上的程序向其他端系统发送信息分组时所要遵循的程序交付数据的方式。只有遵循同一套数据包装规则的系统之间才能互相发送，互相接收，互相理解，互相通信。</p><p>因此，总结的说，本部分的内容可以概括为因特网可以视为是提供服务的基础设施，因特网为运行在端系统上的各类分布式应用赋能，并为他们提供了可靠交付、延时保证等等服务。在后面的章节中会具体展开。</p><hr><h3 id="什么是协议"><a href="#什么是协议" class="headerlink" title="什么是协议"></a>什么是协议</h3><p>上面提到过因特网运行TCP/IP等协议，所以到底什么是协议，在因特网中协议起到什么作用。</p><p>对于协议的理解可以通过人类之间的相互问答为类比，假如一个人想要跟别人说话，那么一个有礼貌的人显然会先跟那个人打招呼，并且询问他愿不愿意与他对话。放在计算机的世界里也是类似的，一个端系统想要向另一个端系统发送信息，我们不能将信息直接发送出去，而是要先向另一个端系统询问，得到答复后再正式传输信息，而因特网协议正是规范这一过程的标准。</p><p>更学术的描述协议就是：<strong>协议定义了两个或多个通信实体之间交换的报文的格式和顺序，以及报文的发送/接收或其他事件所采取的操作。</strong></p><h2 id="如何接入网"><a href="#如何接入网" class="headerlink" title="如何接入网"></a>如何接入网</h2><h3 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h3><ul><li>端系统=主机</li><li>客户-服务器模型，客户向服务器发送请求，服务器向客户提供服务</li><li>P2P模型，不用或者很小规模地使用集中式服务器，靠不同的端系统之间相互通信，运行程序</li></ul><h3 id="接入网"><a href="#接入网" class="headerlink" title="接入网"></a>接入网</h3><h1 id="网络性能"><a href="#网络性能" class="headerlink" title="网络性能"></a>网络性能</h1><h1 id="协议层和服务模型"><a href="#协议层和服务模型" class="headerlink" title="协议层和服务模型"></a>协议层和服务模型</h1><h1 id="因特网发展历史"><a href="#因特网发展历史" class="headerlink" title="因特网发展历史*"></a>因特网发展历史*</h1>]]></content>
      
      
      <categories>
          
          <category> Computer Internet </category>
          
          <category> Chapte 1 InternetOverall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Internet_Survey </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.1 网络层概述</title>
      <link href="/2025/04/05/ji-suan-ji-wang-luo/chapter-4-network-layer/4.1-wang-luo-ceng-gai-shu/"/>
      <url>/2025/04/05/ji-suan-ji-wang-luo/chapter-4-network-layer/4.1-wang-luo-ceng-gai-shu/</url>
      
        <content type="html"><![CDATA[<p>计算机网络从传输应用程序报文(<em>message</em>)的应用层，到封装应用层报文为报文段(<em>segement</em>)的运输层，再到本章即将要介绍的借助路由器将运输层的报文段继续封装成数据报(<em>datagram</em>)并真正实现网络传输的网络层。由此观之，计算机世界中最重要的<strong>抽象封装</strong>思想似乎无处不在。在学习了许多计算机专业课之后，您一定和博主会有同样的感受。</p><hr><p>回归主题，网络层在深入了解其中的技术细节之前，我们需要对其有一个大概的概念和印象。比如说，现在世界上有两台主机H1，H2，他们之间想要互相通信。那么H1主机上的应用程序发出的报文被运输层封装成报文段，然后移交到网络层封装成数据报后大概是怎样将信息传达到H2主机的呢？</p><p>答案是，通过网络中的<strong>路由器</strong>将分组一步一步转发到另一台主机的。每台路由器在功能上可以分成两个部分，一个被称为<strong>数据平面</strong>，另一个则被称为<strong>控制平面</strong>。这两个平面具体到底是什么东西，我们马上就会提及。在此之前，值得注意的一点是，路由器在网络中作为网络中心对五层网络协议栈是存在截断的，即路由器只会运行<em>网络层、链路层、物理层</em> 这三层协议。</p><h2 id="转发和路由选择：数据平面和控制平面"><a href="#转发和路由选择：数据平面和控制平面" class="headerlink" title="转发和路由选择：数据平面和控制平面"></a>转发和路由选择：数据平面和控制平面</h2><p>网络层的功能看起来非常的简单，就是将分组从一台主机发送到另一台主机去，而为了做到这一点，网络层主要需要执行两种功能。</p><ul><li><strong>转发</strong>：你可以认为路由器有很多条输入的通道，当然也有很多条输出的通道连接着不同的其他路由器，就像分岔路口一样。当分组到达路由器时，很自然地，我们期望路由器完成的动作之一就是——确定分组合适的输出链路，即决定将分组运往外面哪一条分路的路由器上去。当然，实际情况可能是该分组是由恶意主机发送的分组，路由器应当拒绝转发它；也可能根据路由器初步的转发决策导致分组即将转发到被禁止前往的路由器，这当然也应该被阻塞转发。这些各种复杂的情况当然都是后面才会进一步讨论的了。</li><li><strong>路由选择</strong>：路由器内部将分组从输入导向输出的动作被称为转发，那么在整个分组运输的过程中，经过每一个路由器都该如何转发。换言之，分组在网络层运输过程中应该走一条什么样的路径，这是由网络层的路由选择算法(<em>routing algorithm</em>)决定的。<br>前者由网络层数据平面保证，后者由网络层控制平面实现。<br>转发是发生在每台路由器内部的本地动作，是决定分组从输入链路导向哪条输出链路的行为；而路由选择是整个网络层范围内的路径选择的优化问题。</li></ul><hr><h3 id="路由器内部的转发表"><a href="#路由器内部的转发表" class="headerlink" title="路由器内部的转发表"></a>路由器内部的转发表</h3><p>路由器内部之所以能知道每个输入的分组要转发到哪个输出端口去，是因为路由器内部存在一个转发表。路由器通过对比发送过来的分组首部的字段值，跟他已知的转发表的字段值做对比，匹配到一个字段值相等的就转发到对应的输出端口，这就是转发的主要过程。</p><p><img src="/uploads/ComputerInternet/Chapter4/ForwardingTable.png" alt="转发表"></p><h3 id="控制平面采取的方法"><a href="#控制平面采取的方法" class="headerlink" title="控制平面采取的方法"></a>控制平面采取的方法</h3><p>了解了路由器内部是存在转发表的事实之后，有些人就要问了，“路由器转发表的具体内容一开始是如何配置的呢？”，总不能总是人工手动配置吧，显然不是。具体如何设置的，控制平面采取了两种方法。这种方法下，每台路由器都有路由选择，转发两种功能。</p><h4 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h4><p>如上图所示，每台路由器都运行着路由选择算法和转发表，不同路由器之间会通过路由选择协议交换包含路由选择信息的路由选择报文来实时计算出不同路由器中的转发表的值，这就是网络层控制平面采取的传统方法。</p><h4 id="SDN方法"><a href="#SDN方法" class="headerlink" title="SDN方法"></a>SDN方法</h4><p>SDN的全称是<em>Software-Defined Networking</em>，即软件定义网络。这种方法的宗旨在于，不需要每台路由器都存在一个路由选择组件，而是将路由选择的算法和指令由远程的软件来定义，软件产生相应的命令决定每台路由器的转发表内容。所以在这种方案中，每台路由器就只有转发这一种功能。而远程控制计算和分发转发表都实现在远程可靠的远程数据中心中。</p><p><img src="/uploads/ComputerInternet/Chapter4/SDN.png" alt="sdn"></p><h2 id="网络服务模型"><a href="#网络服务模型" class="headerlink" title="网络服务模型"></a>网络服务模型</h2><p>在了解了网络层执行的转发、路由选择两大功能后，不知道你有没有产生这样的疑惑。即网络层说是可以完成这样那样的功能，但是运输层的报文段到底该以什么样的速率发送才不会丢失呢？运输层发送的报文段会不会乱序呢？分组与分组之间到达的时间间隔会跟运输层发送时的时间间隔一样吗？网络层会不会提供与网络拥塞相关的信息反馈呢？对这些问题的说明和保证就是由<strong>网络服务模型</strong>（<em>network service model</em>）定义的。</p><p>网络服务模型可能提供的运输特性服务可能包括：</p><ul><li><p>确保交付。确保分组到达目的地</p></li><li><p>具有时延上界的确保交付。不仅确保交付，而且确保在特定的时延上界内交付</p></li><li><p>有序分组交付。确保分组按照发送的顺序到达目的地</p></li><li><p>确保最小带宽。无论网络层有多拥堵，都保证会提供一个最小带宽链路给已经存在的传输路径用于传送分组。</p><blockquote><p>这个确保最小带宽的教材原文我感觉有点不说人话，反正我第一次没看懂，询问了ai才理解。这里贴一下教材原文看看他是不是有点拗口… <strong>“这种网络层服务模仿在发送和接收主机之间一条特定比特率（例如1Mbps）的传输链路的行为。只要发送主机以低于特定比特率的速率传输比特（作为分组的组成部分），则所有分组最终会交付到目的主机。”</strong></p></blockquote></li><li><p>安全性。网络层可以在源主机加密数据报，并且在目的地解密。为所有运输层报文提供机密性。</p></li></ul><p>网络服务模型的这些服务看起来都很好，似乎我们现实世界的网络层都必须要做到这些服务才能够搭建起我们的互联网世界。但是事实却是反直觉的，我们的因特网网络层只提供了单一服务，也就是所谓的<strong>尽力而为服务</strong>(<em>best-effort service</em>)。这种尽力而为服务既不能保证分组一定能到达，也不能保证能按序到达，也不能保证时延上界和最小带宽。听起来似乎这种服务好像是对于没有任何保证的高情商发言。但是大量的事实证明，这种服务已经超过了“足够好”，可以被大面积应用部署。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Internet </category>
          
          <category> Chapter 4 Network Layer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NetworkLayer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.2 路由器</title>
      <link href="/2025/04/05/ji-suan-ji-wang-luo/chapter-4-network-layer/4.2-lu-you-qi/"/>
      <url>/2025/04/05/ji-suan-ji-wang-luo/chapter-4-network-layer/4.2-lu-you-qi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Computer Internet </category>
          
          <category> Chapter 4 Network Layer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NetworkLayer </tag>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
